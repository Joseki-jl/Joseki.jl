var documenterSearchIndex = {"docs":
[{"location":"#Joseki.jl-1","page":"Joseki.jl","title":"Joseki.jl","text":"","category":"section"},{"location":"#","page":"Joseki.jl","title":"Joseki.jl","text":"Suggested opening moves for build APIs in Julia with HTTP.jl.","category":"page"},{"location":"#Contents-1","page":"Joseki.jl","title":"Contents","text":"","category":"section"},{"location":"#","page":"Joseki.jl","title":"Joseki.jl","text":"","category":"page"},{"location":"#Introduction-1","page":"Joseki.jl","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Joseki.jl","title":"Joseki.jl","text":"Want to make an API in Julia but not sure where to start?  Newer versions of HTTP.jl have everything you need to build one from scratch, but getting started can be a bit intimidating at the moment.  Joseki.jl is a set of examples and tools to help you on your way.  It's inspired by Mux.jl and Express.  ","category":"page"},{"location":"#","page":"Joseki.jl","title":"Joseki.jl","text":"You can see a simple example in the main Readme.md file.  ","category":"page"},{"location":"#Basics-1","page":"Joseki.jl","title":"Basics","text":"","category":"section"},{"location":"#","page":"Joseki.jl","title":"Joseki.jl","text":"Joseki.router(endpoints::Array{Tuple{T, String, String}, 1}; middleware=default_middleware, error_fn=unhandled_error_responder) where {T<:Function}","category":"page"},{"location":"#Joseki.router-Union{Tuple{Array{Tuple{T,String,String},1}}, Tuple{T}} where T<:Function","page":"Joseki.jl","title":"Joseki.router","text":"Joseki.router(endpoints; middleware=default_middleware, error_fn=error_responder)\n\nConstruct a HTTP.Servers.Server from an array of Tuples of the form (endpointfunction, httpmethod, endpoint_route).\n\n\n\n\n\n","category":"method"},{"location":"#Middleware-1","page":"Joseki.jl","title":"Middleware","text":"","category":"section"},{"location":"#","page":"Joseki.jl","title":"Joseki.jl","text":"Joseki.add_cors!(req::HTTP.Request)\nJoseki.content_type!(req::HTTP.Request)\nJoseki.hit_logger!(req::HTTP.Request)\nJoseki.body_logger!(req::HTTP.Request)","category":"page"},{"location":"#Joseki.add_cors!-Tuple{HTTP.Messages.Request}","page":"Joseki.jl","title":"Joseki.add_cors!","text":"This sets Access-Control-Allow-Origin to the requester's origin.  In production you would want to check the origin against a whitelist and throw an error otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#Joseki.content_type!-Tuple{HTTP.Messages.Request}","page":"Joseki.jl","title":"Joseki.content_type!","text":"Sets Content-Type for JSON responses.\n\n\n\n\n\n","category":"method"},{"location":"#Joseki.hit_logger!-Tuple{HTTP.Messages.Request}","page":"Joseki.jl","title":"Joseki.hit_logger!","text":"Log a line whenever you get a request.  HTTP.jl already does this.\n\n\n\n\n\n","category":"method"},{"location":"#Joseki.body_logger!-Tuple{HTTP.Messages.Request}","page":"Joseki.jl","title":"Joseki.body_logger!","text":"Log the request body.\n\n\n\n\n\n","category":"method"},{"location":"#Responders-1","page":"Joseki.jl","title":"Responders","text":"","category":"section"},{"location":"#","page":"Joseki.jl","title":"Joseki.jl","text":"json_responder(req::HTTP.Request, o::T) where {T<:Union{Number, AbstractString, Array, Dict}}\nerror_responder(req::HTTP.Request, e::String)\nJoseki.unhandled_error_responder(req::HTTP.Request,e::Exception)","category":"page"},{"location":"#Joseki.json_responder-Union{Tuple{T}, Tuple{Request,T}} where T<:Union{AbstractString, Number, Dict, Array}","page":"Joseki.jl","title":"Joseki.json_responder","text":"json_responder(req::HTTP.Request, o)\n\nForms a response in a standard format.  o can be a Number, String, Dict, or an Array of one of the other types.  The response will look like:\n\n{\n    \"error\": false,\n    \"result\": <JSON serialization of o>\n}\n\n\n\n\n\n","category":"method"},{"location":"#Joseki.error_responder-Tuple{HTTP.Messages.Request,String}","page":"Joseki.jl","title":"Joseki.error_responder","text":"error_responder(req::HTTP.Request, e::String)\nerror_responder(req::HTTP.Request, e::Exception)\nerror_responder(e::Exception)\n\nReturns a response representing an error in a standard format.  Errors captured within endpoints are considered to be user errors and return 200 responses. Errors not explicitly captured by a try ... catch block return 500 responses. The response will look like:\n\n{\n    \"error\": true,\n    \"result\": \"You need to pass variables named x and y in the query string\"\n}\n\n\n\n\n\n","category":"method"},{"location":"#Joseki.unhandled_error_responder-Tuple{HTTP.Messages.Request,Exception}","page":"Joseki.jl","title":"Joseki.unhandled_error_responder","text":"unhandled_error_responder(req::HTTP.Request,e::Exception)\n\nThe default error handler, not intended for use by users.  It includes a gentle reminder that errors should typically be caught elsewhere.\n\n\n\n\n\n","category":"method"},{"location":"#Utilities-1","page":"Joseki.jl","title":"Utilities","text":"","category":"section"},{"location":"#","page":"Joseki.jl","title":"Joseki.jl","text":"body_as_dict(req::HTTP.Request)","category":"page"},{"location":"#Joseki.body_as_dict-Tuple{HTTP.Messages.Request}","page":"Joseki.jl","title":"Joseki.body_as_dict","text":"body_as_dict(req::HTTP.Request)\n\nEndpoints that expect a POST request with a json-encoded body can use this.\n\n\n\n\n\n","category":"method"},{"location":"#Index-1","page":"Joseki.jl","title":"Index","text":"","category":"section"},{"location":"#","page":"Joseki.jl","title":"Joseki.jl","text":"","category":"page"}]
}
